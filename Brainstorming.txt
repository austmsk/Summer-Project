
(Name TBD) Winter Project 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Participants: 

Drelyn Decuire
Austin Musoke
JJ Oluwatimilehin 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Idea: 

College Simulator Game

- 4 Levels for each year of college (maybe more for super seniors)
  - within these levels there will be multiple events that happen
  - shaping the outcome (Example: Go out with friends or Study for you exam)
  - Reach a certain amount of points to advance onto next year

Goal/Ending:
- 

Aspects of Focus of College Student: 

- Academics 

  Question - Should we have different areas of study? 
  We can keep it basic like STEM, ARTS & HISTORY, BUISNESS, AND OTHER
  
  - Coding
  - Math
  - 
  - 

- Social life 
  
  - Love
  - Friends
  - 
  - 

- Career-Building 

  - 
  - 
  - 
  - 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Coding Languages Used (proposed by ChatGPT): 

Python  

- Great for protyping and understanding game locgic due to 
- its simplicity and readability. Libraries like Pygame are 
- ideal for 2D games, making it a good choice if you're new 
- to game developement 

HTML/CSS JavaScript

- Since this is a Web-based game that we would like to run 
- on a browser we can use HTML/CSS and JavaScript (combined with
- an HTML5 Canvas or game Libraries like Phaser 
- (RESEARCH REQUIRED), which allows for interactive and visually - engages in  games accessible to a wide audience )

C# (Unity)

- If we are aiming for a more polished product or plan to make
- the game availible on multiple platforms, Unity with C# is a
- popular choice. Unity's visual editor and community resources 
- help us learn game mechanics and logic effectivly 

Java 

- Often used in android developement, and it's also highly 
- structured, whuch can strengthn your understanding of 
- OOP, essential for games that have complex interactions
- and state management. 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Aspects of Focus for Gaming Mechanics : 

- UI/UX 

- Scoring System 

- Save/Load Function

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


=========================================================
                  COLLEGE SIMULATOR GAME
                 PROJECT BREAKDOWN & GUIDE
                  By: ChatGPT
=========================================================

-----------------------------
1. PRE-PRODUCTION & DESIGN
-----------------------------

A. Game Concept & Scope
-----------------------
1. Draft a concise Game Design Document (GDD) outlining:
   - The story and setting (college experience).
   - Major mechanics (academics, social life, finances).
   - Core gameplay loop (classes, events, decisions, consequences).
2. Define feature list for the Minimum Viable Product (MVP):
   - Example: Basic semester progression, simple GPA/stress system, small set of events.

B. Systems & Mechanics Planning
-------------------------------
1. Identify core systems:
   - GPA/academics system.
   - Social/relationship system.
   - Stress/money management.
2. Detail data points:
   - GPA, skill levels, finances, relationship points, etc.
3. Create flowcharts/diagrams showing how systems interact.

-------------------------------
2. FRONT-END / GAME CLIENT
-------------------------------

A. UI/UX Prototyping
--------------------
1. Create wireframes or mockups for:
   - Main menu
   - Semester schedule
   - Character stats screen
   - Event/choice pop-ups
2. Plan user flow from start screen to in-game systems.

B. Game Engine Implementation
----------------------------
1. Choose an engine or framework:
   - Unity (C#), Phaser (HTML5/JS), Pygame (Python), etc.
2. Implement core logic:
   - Semester progression
   - Event triggers
   - UI elements (bars for GPA, stress, etc.)
3. Basic navigation:
   - Start game
   - Load existing data
   - End/exit game

C. Art & Assets (If Applicable)
-------------------------------
1. Create or source assets:
   - Character sprites, backgrounds, icons, etc.
2. Maintain a consistent art style:
   - Color palette, fonts, layout guidelines.

-----------------------------
3. BACKEND
-----------------------------

A. Architecture & Setup
-----------------------
1. Choose a backend framework:
   - Node.js + Express
   - Python + Flask/Django
   - C# + ASP.NET Core
   - Etc.
2. Set up a simple "Hello World" or "/ping" endpoint.
3. Connect to a database:
   - SQL (MySQL, PostgreSQL) or NoSQL (MongoDB, Firebase).

B. API Endpoints
----------------
1. User authentication:
   - /register (create account)
   - /login (obtain session/token)
2. Game progress:
   - /save-progress (POST)
   - /get-progress (GET)
3. (Optional) Leaderboard or community features

C. Data Models & Logic
----------------------
1. Player/User model:
   - Username, passwordHash, email, creation date
   - Game stats: current semester, GPA, finances, relationships
2. Decide how much logic is server-side vs. client-side:
   - Single-player can keep logic mostly on the client.
   - Multiplayer or advanced verification may push logic to the server.
3. Database schema or migrations:
   - If SQL, set up tables and foreign keys.
   - If NoSQL, define collections and document structures.

--------------------------------
4. INTEGRATION & TESTING
--------------------------------

A. Client-Server Connection
---------------------------
1. Implement calls from the front-end to the backend:
   - Save/Load functions in your game engine.
   - Validate data exchange (status codes, error handling).

B. Quality Assurance (QA)
-------------------------
1. Write test cases:
   - Create, register, login user
   - Semester progression logic
   - Boundary checks (max/min GPA or stress)
2. Use tools like Postman or automated tests (unit/integration).

C. Gameplay Testing & Balancing
-------------------------------
1. Verify difficulty curves:
   - Is studying vs. partying balanced?
   - Are finances too strict or too easy?
2. Gather feedback from alpha/beta testers:
   - Classmates, friends, or online volunteers.

---------------------------------
5. PROJECT MANAGEMENT & TEAM ROLES
---------------------------------

A. Roles & Responsibilities
---------------------------
1. Project Manager / Designer
   - Oversees scheduling, organizes tasks, maintains GDD.
2. Lead Game Developer
   - Implements core gameplay, semester systems, scenes.
3. Backend Developer
   - Sets up server, database, writes API endpoints.
4. Assistant Game Developer
   - Works on UI elements, event scripting, helps integrate calls.
5. Art & UI/UX
   - Designs wireframes, creates assets (sprites/icons), refines layout.
6. QA / Tester (Floater)
   - Tests features, logs bugs, assists other areas when needed.

B. Task Management & Collaboration
----------------------------------
1. Use Trello, Asana, or GitHub Projects for ticket tracking.
2. Version Control (Git):
   - Separate branches for different features.
   - Main or master branch for stable builds.
3. Milestones & Deadlines:
   - Define MVP, alpha, beta, and final release checkpoints.
   - Regular check-ins or sprints (weekly or bi-weekly).

-------------------------
6. POLISH & LAUNCH
-------------------------

A. UI & UX Refinement
---------------------
1. Ensure consistency in design:
   - Unified color palette, consistent button placement.
2. Conduct final user tests:
   - Address any usability issues before launch.

B. Extra Features (If Time)
---------------------------
1. More events, majors, and minigames.
2. Leaderboards, social media integration, or chat systems.
3. Additional polish like animations, sound effects, and custom music.

C. Deployment
-------------
1. Web-based game:
   - Host front-end on GitHub Pages or a web server.
   - Deploy backend to Heroku, AWS, or other cloud platforms.
2. Unity builds:
   - Export to Windows, Mac, or WebGL.
3. Database hosting:
   - Use a managed service (AWS RDS, MongoDB Atlas) or keep it local for small-scale demos.

=========================================
   KEY TIPS FOR A SUCCESSFUL PROJECT
=========================================
1. Start small with a core MVP.
2. Break tasks into manageable chunks.
3. Communicate often, track progress, and iterate.
4. Donâ€™t let feature creep derail your timeline.
5. Learn and have fun: the goal is both to deliver and to grow skills.

=========================================================
END OF FILE
=========================================================
